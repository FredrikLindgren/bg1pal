
DEFINE_PATCH_FUNCTION comp_transform STR_VAR f_Itm = blank f_Are = blank f_Var = blank f_Cre = blank f_Replace = blank RET f_Itm f_Are f_Var f_Cre f_Replace BEGIN
  TO_LOWER f_Itm
  TO_LOWER f_Are
  TO_LOWER f_Var
  TO_LOWER f_Cre
  TO_LOWER f_Replace
  PATCH_IF BGT = 1 AND BGT_Convert = 1 BEGIN
    PATCH_IF VARIABLE_IS_SET $bgt_compat_itm_array("%f_Itm%") BEGIN
      SPRINT f_Itm $bgt_compat_itm_array("%f_Itm%")
    END
    PATCH_IF VARIABLE_IS_SET $bgt_compat_itm_array("%f_Replace%") BEGIN
      SPRINT f_Replace $bgt_compat_itm_array("%f_Replace%")
    END
    PATCH_IF "%f_Var%" STRING_MATCHES_REGEXP "%bgt_compat_cre_regexp%\.cre$" = 0 BEGIN
      INNER_PATCH "%f_Var%" BEGIN
        READ_ASCII 0 f_Var (STRING_LENGTH "%f_Var%" - 4)
      END
      PATCH_IF VARIABLE_IS_SET $bgt_compat_cre_array("%f_Var%") BEGIN //at least this way the false positives will go through the ride without being broken
        SPRINT f_Var $bgt_compat_cre_array("%f_Var%")
      END
      INNER_PATCH_SAVE f_Var "%f_Var%" BEGIN
        INSERT_BYTES STRING_LENGTH "%f_Var%" 4
        WRITE_ASCII  STRING_LENGTH "%f_Var%" ".cre"
      END
    END
    PATCH_IF VARIABLE_IS_SET $bgt_compat_cre_array("%f_Cre%") BEGIN
      SPRINT f_Cre $bgt_compat_cre_array("%f_Cre%")
    END
    PATCH_IF "%f_Var%" STRING_MATCHES_REGEXP ".*\.are$" = 0 BEGIN
      INNER_PATCH "%f_Var%" BEGIN
        READ_ASCII 0 f_Var (STRING_LENGTH "%f_Var%" - 4)
      END
      SPRINT f_Var $bgt_compat_are_array("%f_Var%")
      INNER_PATCH_SAVE f_Var "%f_Var%" BEGIN
        INSERT_BYTES STRING_LENGTH "%f_Var%" 4
        WRITE_ASCII  STRING_LENGTH "%f_Var%" ".are"
      END
    END
    PATCH_IF VARIABLE_IS_SET $bgt_compat_are_array("%f_Are%") BEGIN
      SPRINT f_Are $bgt_compat_are_array("%f_Are%")
    END
  END

  PATCH_IF Tutu = 1 BEGIN
    PATCH_IF "%f_Itm%" STRING_COMPARE_CASE blank AND !VARIABLE_IS_SET $tutu_compat_itm_array("%f_Itm%") BEGIN
      SPRINT f_Itm "_%f_Itm%"
    END
    PATCH_IF "%f_Replace%" STRING_COMPARE_CASE blank AND
    "%f_Replace%" STRING_MATCHES_REGEXP "rndtre.*" AND
    !VARIABLE_IS_SET $tutu_compat_itm_array("%f_Replace%") BEGIN
      SPRINT f_Replace "_%f_Replace%"
    END
    PATCH_IF "%f_Var%" STRING_MATCHES_REGEXP ".*\.\(cre\|sto\|dlg\|bcs\)$" = 0 BEGIN
      PATCH_IF STRING_LENGTH "%f_Var%" = 12 BEGIN
        INNER_PATCH_SAVE f_Var "%f_Var%" BEGIN
          WRITE_ASCII 0 _
        END
      END ELSE BEGIN
        SPRINT f_Var "_%f_Var%"
      END
    END
    PATCH_IF "%f_Cre%" STRING_MATCHES_REGEXP ".*\.cre$" AND "%f_Cre%" STRING_COMPARE_CASE blank BEGIN
      PATCH_IF STRING_LENGTH "%f_Cre%" = 8 BEGIN
        INNER_PATCH_SAVE f_Cre "%f_Cre%" BEGIN
          WRITE_ASCII 0 _
        END
      END ELSE BEGIN
        SPRINT f_Cre "_%f_Cre%"
      END
    END
    PATCH_IF "%f_Var%" STRING_MATCHES_REGEXP ".*\.are$" = 0 BEGIN
      INNER_PATCH_SAVE f_Var "%f_Var%" BEGIN
        WRITE_ASCII 0 fw
      END
    END
    PATCH_IF "%f_Are%" STRING_COMPARE_CASE blank BEGIN
      INNER_PATCH_SAVE f_Are "%f_Are%" BEGIN
        WRITE_ASCII 0 fw
      END
    END
  END
END
